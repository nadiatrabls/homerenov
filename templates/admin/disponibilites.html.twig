{% extends 'base.html.twig' %}

{% block title %}Gestion des rendez-vous{% endblock %}

{% block body %}
<div class="container my-5 back">
    <h1 class="titre">Gestion des rendez-vous</h1>

    <!-- Bouton pour revenir au Dashboard Admin -->
    <div class="mb-4 text-start">
        <a href="{{ path('admin_dashboard') }}" class="btn btn-secondary">Retour au Dashboard Admin</a>
    </div>

    <!-- Bouton pour créer une nouvelle disponibilité -->
    <div class="mb-3 text-end">
        <a href="{{ path('admin_disponibilite_new') }}" class="btn btn-success">Créer une nouvelle disponibilité</a>
    </div>

    <!-- Si aucune disponibilité n'est trouvée -->
    {% if disponibilites is empty %}
        <p>Aucune disponibilité n'a été créée.</p>
    {% else %}
        <!-- Table responsive pour éviter le débordement -->
        <div class="table-responsive">
           <table class="table table-bordered table-hover">
                <thead>
                    <tr>
                        <th>Date</th>
                        <th>Heure de début</th>
                        <th>Heure de fin</th>
                        <th>Client</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    {% for disponibilite in disponibilites %}
                    <tr>
                        <td>{{ disponibilite.date|date('d/m/Y') }}</td>
                        <td>{{ disponibilite.heureDebut }}</td>
                        <td>{{ disponibilite.heureFin }}</td>
                        <td>
                           {% if disponibilite.client %}
                            Client : {{ disponibilite.client }}
                        {% else %}
                            Disponible
                        {% endif %}
                        </td>
                        <td>
                            <a href="{{ path('admin_disponibilite_edit', {id: disponibilite.id}) }}" class="btn btn-warning btn-sm">Éditer</a>
                            <form method="post" action="{{ path('admin_disponibilite_delete', {id: disponibilite.id}) }}" onsubmit="return confirm('Êtes-vous sûr de vouloir supprimer cette disponibilité ?');" style="display:inline-block;">
                                <input type="hidden" name="_token" value="{{ csrf_token('delete' ~ disponibilite.id) }}">
                                <button class="btn btn-danger btn-sm">Supprimer</button>
                            </form>
                        </td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
    {% endif %}
</div>

<!-- Affichage du calendrier -->
<div class="d-flex justify-content-between align-items-center mb-4">
    <button id="prevMonthBtn" class="btn btn-outline-primary">Précédent</button>
    <span id="currentMonth" class="h5"></span>
    <button id="nextMonthBtn" class="btn btn-outline-primary">Suivant</button>
</div>
<div id="calendar"></div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        let disponibilites = {{ disponibilites|json_encode|raw }};
        let calendar = document.getElementById('calendar');
        let currentDate = new Date();
        let year = currentDate.getFullYear();
        let month = currentDate.getMonth();
        let today = new Date(); // La date du jour pour la comparaison

        const monthNames = ['Janvier', 'Février', 'Mars', 'Avril', 'Mai', 'Juin', 'Juillet', 'Août', 'Septembre', 'Octobre', 'Novembre', 'Décembre'];

        function updateMonthDisplay() {
            document.getElementById('currentMonth').textContent = `${monthNames[month]} ${year}`;
        }

        function createCalendar(year, month) {
            let firstDay = new Date(year, month, 1);
            let lastDay = new Date(year, month + 1, 0);

            // Générer le tableau du calendrier
            let table = '<table class="table table-bordered"><thead><tr>';
            let days = ['Dim', 'Lun', 'Mar', 'Mer', 'Jeu', 'Ven', 'Sam'];
            days.forEach(day => table += `<th>${day}</th>`);
            table += '</tr></thead><tbody><tr>';

            // Remplir les jours avant le premier jour du mois
            for (let i = 0; i < firstDay.getDay(); i++) {
                table += '<td></td>';
            }

            // Remplir les jours du mois
            for (let day = 1; day <= lastDay.getDate(); day++) {
                let date = new Date(year, month, day);
                let dateStr = `${year}-${String(month + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;

                // Vérifier si la date est passée
                if (date < today) {
                    table += `<td class="past-date" data-date="${dateStr}">${day}</td>`;
                } else {
                    table += `<td data-date="${dateStr}">${day}</td>`;
                }

                if (date.getDay() === 6) {
                    table += '</tr><tr>';
                }
            }

            table += '</tr></tbody></table>';
            calendar.innerHTML = table;

            // Marquer les disponibilités en fonction de leur statut
            disponibilites.forEach(event => {
                let cell = document.querySelector(`td[data-date="${event.date}"]`);
                if (cell) {
                    if (event.client) {
                        // Si la disponibilité a été réservée, mettre en bleu ciel clair
                        cell.style.backgroundColor = '#96c9fb'; // Bleu ciel clair
                    } else {
                        // Si la disponibilité est encore disponible, mettre en vert clair
                        cell.style.backgroundColor = '#B0F2B6'; // Vert clair
                    }
                    cell.innerHTML += `<br><small>${event.heureDebut} - ${event.heureFin}</small>`;
                }
            });

            // Désactiver les dates passées (non clicables)
            document.querySelectorAll('.past-date').forEach(function (cell) {
                cell.style.pointerEvents = 'none';
                cell.style.opacity = '0.5';
            });
        }

        createCalendar(year, month);
        updateMonthDisplay();

        // Ajouter des boutons de navigation pour le mois
        document.getElementById('prevMonthBtn').addEventListener('click', function () {
            month--;
            if (month < 0) {
                month = 11;
                year--;
            }
            createCalendar(year, month);
            updateMonthDisplay();
        });

        document.getElementById('nextMonthBtn').addEventListener('click', function () {
            month++;
            if (month > 11) {
                month = 0;
                year++;
            }
            createCalendar(year, month);
            updateMonthDisplay();
        });
    });
</script>
<!-- Styles personnalisés -->
<style>
html, body {
    max-width: 100vw;
    overflow-x: hidden;
}

/* Titre */
.titre {
    text-align: center;
    font-size: 1.5rem;
    margin-bottom: 20px;
}

/* Alignement des boutons */
.text-start {
    margin-top: 30px;
    margin-bottom: 20px;
    text-align: left;
}
.past-date {
    background-color: #f5f5f5; /* Gris clair pour indiquer une date passée */
    color: #aaa; /* Texte gris */
    cursor: not-allowed; /* Indique que la date n'est pas cliquable */
}

.text-end {
    margin-bottom: 20px;
    text-align: right;
}

/* Table responsive */
.table-responsive {
    width: 100%;
    overflow-x: auto;
    -webkit-overflow-scrolling: touch;
}

/* Marges pour mobile */
@media (max-width: 768px) {
    .text-start {
        margin-left: 0;
    }

    .text-end {
        margin-right: 0;
    }

    /* Ajuster la largeur des boutons */
    .btn {
        width: 100%;
        margin-bottom: 10px;
    }

    /* Réduire la taille du texte des titres sur mobile */
    .titre {
        font-size: 1.2rem;
    }
}
</style>
{% endblock %}
